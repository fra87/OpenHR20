# Configuration file for Build Environment
# This file contains the common configuration between the master and slave(s)

# If you want to override something locally without GIT tracking the modifications
# write them in a file called personal.config in the same dir as this file.
# You can both override variables and unset them.
# e.g. if you want to use programmer USBtinyISP and unset the secret, write
# unset SECRET
# PROGRAMMER=usbtiny

##############################################################
# Environment configuration parameters
##############################################################

# ADDRESSES
# This variable contains the list of addresses for the slaves
# Each slave must have an address between 01 and 29
ADDRESSES=("10" "20")

# SECRET
# This variable contains the secret for the RFM communication
# Must be either
# --key 01 23 45 67 89 ab cd ef (where the eight values are the key to be used)
# --pass "passphrase" (where passphrase is the one to use)
# If this is not set, the script will ask to the user which passphrase to use
SECRET='--pass "passphrase"'

# UNIT_HW
# This variable contains the hardware type of the units
# Must be either
# HONEYWELL (for Honeywell HR-20)
# HR-25 (for Honeywell HR-25)
# THERMOTRONIC (for Thermotronic valve)
UNIT_HW=HONEYWELL

# UNIT_RFM_WIRE
# This variable contains the RFM connection wiring
# Must be either
# MARIOJTAG
UNIT_RFM_WIRE=MARIOJTAG

# MASTER_HW
# This variable contains the hardware type of the master
# Must be either
# NANODE
# JEENODE
# OTHER (default value)
MASTER_HW=JEENODE

# RFM_FREQ
# This variable contains the frequency of the RFM unit
RFM_FREQ=868

# BIN_FOLDER
# This variable is the path where binary files are saved (with respect to the repository root)
BIN_FOLDER=bin

##############################################################
# Flashing parameters
##############################################################

# PROGRAMMER
# Programmer to be used
# Get the list with the command avrdude -c ?
PROGRAMMER=dragon_jtag

# PROGRAMMER_PORT
# Port of the programmer
PROGRAMMER_PORT=usb

# PROGRAMMER_OPTS
# Additional options for the programmer
PROGRAMMER_OPTS=

##############################################################
# Helper functions
##############################################################

##############################
# Function ValidUnitAddress
# Verify if the provided address is valid (between 1 and 29)
# Arguments:
#   $1 Unit address
# Return value:
#   return -> 0 if valid, 1 if not valid
ValidUnitAddress() {
	[ "$1" -ge 1 -a "$1" -le 29 ] 2>/dev/null;
}

##############################
# Function GetUnitPrefix
# Calculate the unit prefix according to the unit hardware
# Arguments:
#   $1 Unit Hardware (THERMOTRONIC|HONEYWELL|HR25)
# Return value:
#   stdout -> the calculated prefix
#   stderr -> error message (if HW is unrecognized)
#   return -> 0 if success, 1 if HW unrecognized
GetUnitPrefix() {
	case "$1" in
		THERMOTRONIC)
			echo "thermotronic"
			;;
		HONEYWELL)
			echo "hr20"
			;;
		HR25)
			echo "hr25"
			;;
		*)
			echo "Error with unit hardware selection" >&2
			return 1
			;;
	esac
}

##############################
# Function GetBinaryFilePrefix
# Get the prefix of the filename
# Arguments:
#   $1 Target (MASTER of UNIT)
#   $2 (opt) if UNIT, the address of the unit
# Return value:
#   stdout -> the calculated file prefix
#   stderr -> error message (if parameters are wrong)
#   return -> 0 if success, 1 if parameters are wrong
GetBinaryFilePrefix() {
	local MainName=""
	case "$1" in
		MASTER)
			MainName="master"
			;;
		UNIT)
			if ! ValidUnitAddress "$2"; then
				echo "Error with address parameter" >&2
				return 1
			fi
			printf -v MainName "unit_%02d" $2
			;;
		*)
			echo "Error with target parameter" >&2
			return 1
			;;
	esac
	echo "${MainName}"
}

##############################
# Function GetBinaryFileName
# Get the filename of a binary file
# Arguments:
#   $1 File type (HEX or EEPROM)
#   $2 Target (MASTER of UNIT)
#   $3 (opt) if UNIT, the address of the unit
# Return value:
#   stdout -> the calculated file name
#   stderr -> error message (if parameters are wrong)
#   return -> 0 if success, 1 if parameters are wrong
GetBinaryFileName() {
	local MainName=""
	local Extension=""
	case "$1" in
		HEX)
			Extension="hex"
			;;
		EEPROM)
			Extension="eep"
			;;
		*)
			echo "Error with file type parameter" >&2
			return 1
			;;
	esac
	MainName=$(GetBinaryFilePrefix "$2" "$3") || return 1
	echo "${MainName}.${Extension}"
}

##############################
# Function GetProcessorCode
# Get the microprocessor code from the HW platform name
# To get the supported codes use the command avrdude -p ?
# Arguments:
#   $1 The HW platform name
# Return value:
#   stdout -> the calculated processor name
#   stderr -> error message (if parameters are wrong)
#   return -> 0 if success, 1 if parameters are wrong
GetProcessorCode() {
	case "$1" in
	# Unit hardware
		HONEYWELL)
			# ATmega169p
			echo "m169"
			;;
		HR-25)
			# ATmega329pa
			echo "m329p"
			;;
		THERMOTRONIC)
			# ATmega169
			echo "m169"
			;;
	# Master hardware
		NANODE)
			# ATmega328
			echo "m328"
			;;
		JEENODE)
			# ATmega328P
			echo "m328p"
			;;
		*)
			echo "Error with HW platform name parameter" >&2
			return 1
			;;
	esac
}

##############################
# Include personal file if it exists
PERSONALFILEPATH="${0%/*}"/personal.config
[ -f "$PERSONALFILEPATH" ] && source "$PERSONALFILEPATH"